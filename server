#!/usr/bin/env node
/*
 *********************************************************************************
 *                     Copyright (C) 2017 wystan
 *
 *       filename: bdd_in_browser.js
 *    description:
 *        created: 2017-11-30 10:59:19
 *         author: wystan
 *
 *********************************************************************************
 */

var logi = console.info;
var logw = console.warn;
var loge = console.error;
var logd = console.log;

var provider = null;

var express = require('express');
var app = express();
var expressWs = require('express-ws')(app);
app.use(express.static('static'));
app.listen(8080);

app.ws("/webrtc", function(ws, req) {
    logi("new client");
    if (provider) { ws.close(); }
    else provider = new RtcProvider(ws);
});

function get_rtcprovider() {
    return provider;
}

class RtcObject {
    constructor(objectType, id, sdp) {
        this.type = objectType;
        this.id = id;
        this.sdp = sdp;
    };
};

class RtcProvider {
    //public methods
    constructor(ws) {
        logi("new provider registered.");
        this.ws = ws;
        ws.on("close", function(e){
            logw("provider closed");
            provider = null;
        });
        ws.on("message", this._onmsg.bind(this));
        this.cb = null;
        this.handler = null;
        setImmediate(run_test);
    };
    create_recver(offer, cb) {
        this.cb = cb;
        let req = {
            "type": "request",
            "action": "create",
            "service": "rtcreceiver",
            "sdp": offer
        };
        function callback(resp) {
            if (resp.type !== "response" || resp.action !== "create" || resp.service !== "rtcreceiver") return;
            if (resp.error !== 0) {
                cb(null, {"error": resp.error, "desc": resp.desc});
            } else {
                let obj = new RtcObject("receiver", resp.data.id, resp.data.sdp);
                cb(obj, null);
            }
        }
        this.handler = callback;
        this._send(req);
    };
    destroy_recver(id, cb) {
        this.cb = cb;
        let req = {
            "type": "request",
            "action": "destroy",
            "service": "rtcreceiver",
            "id": id,
        };
        function callback(resp) {
            if (resp.type !== "response" || resp.action !== "destroy" || resp.service !== "rtcreceiver") return;
            if (resp.error !== 0) {
                cb({"error": resp.error, "desc": resp.desc});
            } else {
                cb(null);
            }
        }
        this.handler = callback;
        this._send(req);
    };
    create_sender(srcid, cb) {
        this.cb = cb;
        let req = {
            "type": "request",
            "action": "create",
            "service": "rtcsender",
            "sourceid": srcid
        };
        function callback(resp) {
            if (resp.type !== "response" || resp.action !== "create" || resp.service !== "rtcsender") return;
            if (resp.error !== 0) {
                cb(null, {"error": resp.error, "desc": resp.desc});
            } else {
                let obj = new RtcObject("sender", resp.data.id, resp.data.sdp);
                cb(obj, null);
            }
        }
        this.handler = callback;
        this._send(req);
    };
    destroy_sender(id, cb) {
        this.cb = cb;
        let req = {
            "type": "request",
            "action": "destroy",
            "service": "rtcsender",
            "id": id,
        };
        function callback(resp) {
            if (resp.type !== "response" || resp.action !== "destroy" || resp.service !== "rtcsender") return;
            if (resp.error !== 0) {
                cb({"error": resp.error, "desc": resp.desc});
            } else {
                cb(null);
            }
        }
        this.handler = callback;
        this._send(req);
    };
    setanswer(senderId, answer, cb) {
        this.cb = cb;
        let req = {
            "type": "request",
            "action": "setanswer",
            "service": "rtcsender",
            "id": senderId,
            "sdp": answer
        };
        function callback(resp) {
            if (resp.type !== "response" || resp.action !== "setanswer" || resp.service !== "rtcsender") return;
            if (resp.error !== 0) {
                cb({"error": resp.error, "desc": resp.desc});
            } else {
                cb(null);
            }
        }
        this.handler = callback;
        this._send(req);
    };

    //private methods
    _onmsg(msg) {
        let resp = JSON.parse(msg);
        if (this.handler) this.handler(resp);
    };
    _send(msg) {
        if (this.ws) this.ws.send(JSON.stringify(msg));
    };
};

function run_test() {
    let sender = null;
    let recver = null;
    let s1 = s2 = r1 = r2 = null;

    let prov = get_rtcprovider();
    if (!prov) {
        loge("no provider avaliable");
        return;
    }

    function destroy_all() {
        prov.destroy_sender(r2.id, function(e){
            prov.destroy_sender(s2.id, function(e){
                prov.destroy_recver(r1.id, function(e){
                    prov.destroy_recver(s1.id, function(e){
                        logi("destroy all.");
                    });
                });
            });
        });
    }
    function setanswer2(obj, err) {
        if (err) {
            loge("fail to create recver2:", err);
            return;
        }
        r2 = obj;
        prov.setanswer(s2.id, r2.sdp, function(err){
            setTimeout(destroy_all, 10000);
        });
    }

    function new_recver2(obj, err) {
        if (err) {
            loge("fail to create sender2");
            return;
        }
        s2 = obj;
        logi("create sender:", obj.id);
        prov.create_recver(obj.sdp, setanswer2);
    }

    function new_sender2(err) {
        if (err) {
            loge("fail to set answer:", err);
            return;
        }
        prov.create_sender(r1.id, new_recver2);
    }
    function setanswer1(obj, err) {
        if (err) {
            loge("fail to create recver");
            return;
        }
        r1 = obj;
        logi("create recver:", obj.id);
        prov.setanswer(s1.id, r1.sdp, new_sender2);
    }
    function new_recver1(obj, err) {
        if (err) {
            loge("fail to create sender");
            return;
        }
        logi("create sender: ", obj.id);
        s1 = obj;
        prov.create_recver(obj.sdp, setanswer1);
    }
    prov.create_sender("", new_recver1);
}


logi("try: http://localhost:8080");

/************************************* END **************************************/

